// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: chupacabra.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Chupacabra_EnqueueSubmit_FullMethodName = "/proto.Chupacabra/EnqueueSubmit"
	Chupacabra_PollTest_FullMethodName      = "/proto.Chupacabra/PollTest"
)

// ChupacabraClient is the client API for Chupacabra service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChupacabraClient interface {
	EnqueueSubmit(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*EnqueueResponse, error)
	PollTest(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*PollResponse, error)
}

type chupacabraClient struct {
	cc grpc.ClientConnInterface
}

func NewChupacabraClient(cc grpc.ClientConnInterface) ChupacabraClient {
	return &chupacabraClient{cc}
}

func (c *chupacabraClient) EnqueueSubmit(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*EnqueueResponse, error) {
	out := new(EnqueueResponse)
	err := c.cc.Invoke(ctx, Chupacabra_EnqueueSubmit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chupacabraClient) PollTest(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*PollResponse, error) {
	out := new(PollResponse)
	err := c.cc.Invoke(ctx, Chupacabra_PollTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChupacabraServer is the server API for Chupacabra service.
// All implementations must embed UnimplementedChupacabraServer
// for forward compatibility
type ChupacabraServer interface {
	EnqueueSubmit(context.Context, *EnqueueRequest) (*EnqueueResponse, error)
	PollTest(context.Context, *PollRequest) (*PollResponse, error)
	mustEmbedUnimplementedChupacabraServer()
}

// UnimplementedChupacabraServer must be embedded to have forward compatible implementations.
type UnimplementedChupacabraServer struct {
}

func (UnimplementedChupacabraServer) EnqueueSubmit(context.Context, *EnqueueRequest) (*EnqueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnqueueSubmit not implemented")
}
func (UnimplementedChupacabraServer) PollTest(context.Context, *PollRequest) (*PollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollTest not implemented")
}
func (UnimplementedChupacabraServer) mustEmbedUnimplementedChupacabraServer() {}

// UnsafeChupacabraServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChupacabraServer will
// result in compilation errors.
type UnsafeChupacabraServer interface {
	mustEmbedUnimplementedChupacabraServer()
}

func RegisterChupacabraServer(s grpc.ServiceRegistrar, srv ChupacabraServer) {
	s.RegisterService(&Chupacabra_ServiceDesc, srv)
}

func _Chupacabra_EnqueueSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChupacabraServer).EnqueueSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chupacabra_EnqueueSubmit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChupacabraServer).EnqueueSubmit(ctx, req.(*EnqueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chupacabra_PollTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChupacabraServer).PollTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chupacabra_PollTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChupacabraServer).PollTest(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chupacabra_ServiceDesc is the grpc.ServiceDesc for Chupacabra service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chupacabra_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Chupacabra",
	HandlerType: (*ChupacabraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnqueueSubmit",
			Handler:    _Chupacabra_EnqueueSubmit_Handler,
		},
		{
			MethodName: "PollTest",
			Handler:    _Chupacabra_PollTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chupacabra.proto",
}
